pipeline {
    agent any

    tools {
        maven 'maven3' // Use the Maven installation configured in Jenkins
    }

    environment {
        IMAGE_TAG = "${BUILD_NUMBER}"
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Clone Git Repo') {
            steps {
                git branch: 'main',
                    credentialsId: 'git-creds',
                    url: 'https://github.com/Murali-Kaspa/CICD-Using-Argo-CD-EKS.git'
            }
        }

        stage('SonarQube Code Quality Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh '''
                        mvn clean verify sonar:sonar \
                        -Dsonar.projectKey=sonartestapp \
                        -Dsonar.projectName=sonartestapp
                    '''
                }
            }
        }

        stage('Build Artifacts') {
            steps {
                sh 'mvn clean package'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh '''
                    docker build -t muralikaspa1998/myimage:$IMAGE_TAG .
                    docker images
                '''
            }
        }

        stage('Install Trivy') {
            steps {
                sh '''
                    sudo yum remove trivy -y
                    rm -rf *.zip
                    wget https://github.com/aquasecurity/trivy/releases/download/v0.64.1/trivy_0.64.1_Linux-64bit.rpm
                    sudo rpm -ivh trivy_0.64.1_Linux-64bit.rpm
                    trivy --version
                '''
            }
        }

        stage('Scan Docker Image with Trivy') {
            steps {
                sh 'sudo trivy image muralikaspa1998/myimage:$IMAGE_TAG'
            }
        }

        stage('Trivy Gate') {
            steps {
                sh 'trivy image --exit-code 1 --severity CRITICAL,HIGH muralikaspa1998/myimage:$IMAGE_TAG'
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-creds') {
                        sh 'docker push muralikaspa1998/myimage:$IMAGE_TAG'
                    }
                }
            }
        }

        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "CICD-Using-Argo-CD-EKS"
                GIT_USER_NAME = "Murali-Kaspa"
            }
            steps {
                echo 'Update Deployment File'
                withCredentials([
                    string(credentialsId: 'git-creds', variable: 'githubtoken')
                ]) {
                    sh '''
                        git config user.email "murali.kaspa26@gmail.com"
                        git config user.name "Murali-Kaspa"
                        rm -rf *.rpm.* #To Remove the trivy files in GitHub
                        sed -i "s#muralikaspa1998/myimage:.*#muralikaspa1998/myimage:${BUILD_NUMBER}#g" deploymentfiles/deployment.yml
                        git add .
                        git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                        git push https://${githubtoken}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git HEAD:main
                    '''
                }
            }
        }
    }

    post {
        success {
            echo "Build #${BUILD_NUMBER} completed successfully."
        }
        failure {
            echo " Build #${BUILD_NUMBER} failed!"
        }
    }
}
